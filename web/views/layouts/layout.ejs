<!DOCTYPE html>
<html>
  <head>
    <title>Linkedin Analysis</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/header.css">
    <link rel="stylesheet" href="/styles/homepage.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
    <script src="https://code.jquery.com/jquery-3.3.1.js"
      integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
      crossorigin="anonymous"></script>
    <script>
      

    //   $(window).on("scroll", function () {
    //     activeMenuItem($("#nav_mobile_menu"));
    // });

    //function for active menuitem
    // function activeMenuItem($links) {
    //     var top = $(window).scrollTop(),
    //         windowHeight = $(window).height(),
    //         documentHeight = $(document).height(),
    //         cur_pos = top + 2,
    //         sections = $("section"),
    //         nav = $links,
    //         nav_height = nav.outerHeight(),
    //         home = nav.find(" > ul > li:first");

    //     sections.each(function () {
    //         var top = $(this).offset().top - mainHeaderHeight,
    //             bottom = top + $(this).outerHeight();

    //         if (cur_pos >= top && cur_pos <= bottom) {
    //             nav.find("> ul > li > a").parent().removeClass("active");
    //             nav.find("a[href='#" + $(this).attr('id') + "']").parent().addClass("active");
    //         } else if (cur_pos === 2) {
    //             nav.find("> ul > li > a").parent().removeClass("active");
    //             home.addClass("active");
    //         } else if ($(window).scrollTop() + windowHeight > documentHeight - 400) {
    //             nav.find("> ul > li > a").parent().removeClass("active");
    //         }
    //     });
    // }
    </script>
  </head>

  <body>
    <header class="header-area">
        <div class="main-menu">
						<nav id="nav_mobile_menu">
							<ul id="navigation">
								<li class="active">
									<a href="#section1">Section1</a>
								</li>
								<li>
									<a href="#section2">Section2</a>
								</li>
							</ul>
						</nav>
					</div>
    </header>
    
    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/js/plugins.js"></script>
    <script src="/js/scripts.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
